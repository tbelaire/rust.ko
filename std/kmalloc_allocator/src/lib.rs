#![feature(allocator)]
// We define the allocator fns required.
#![allocator]
// Don't depend on std and the autogenerated bindings, as we don't want circular dependencies.
#![no_std]
// Define c_void, without depending on std::raw.
#[repr(u8)]
pub enum c_void {
    #[doc(hidden)]
    __variant1,
    #[doc(hidden)]
    __variant2,
}
type gfp_t = u32;
type size_t = usize;

extern "C" {
    fn __kmalloc(size: size_t, flags: gfp_t) -> *mut c_void;
    fn kfree(arg1: *const c_void);
}

/// Align downwards. Returns the greatest x with alignment `align`
/// so that x <= addr. The alignment must be a power of 2.
pub fn align_down(addr: usize, align: usize) -> usize {
    if align.is_power_of_two() {
        addr & !(align - 1)
    } else if align == 0 {
        addr
    } else {
        panic!("`align` must be a power of 2");
    }
}

/// Align upwards. Returns the smallest x with alignment `align`
/// so that x >= addr. The alignment must be a power of 2.
pub fn align_up(addr: usize, align: usize) -> usize {
    align_down(addr + align - 1, align)
}


// This crate is responsible for connecting to kmalloc.
#[no_mangle]
pub extern "C" fn __rust_allocate(size: usize, _align: usize) -> *mut u8 {
    unsafe { __kmalloc(size, 0x90) as *mut u8 }
}

#[no_mangle]
pub extern "C" fn __rust_usable_size(size: usize, _align: usize) -> usize {
    size
}

#[no_mangle]
pub extern "C" fn __rust_deallocate(ptr: *mut u8,
                                    _size: usize,
                                    _align: usize) {
    unsafe {
        kfree(ptr as *const c_void);
    }
}

#[no_mangle]
pub extern "C" fn __rust_reallocate(ptr: *mut u8,
                                    size: usize,
                                    new_size: usize,
                                    align: usize)
                                    -> *mut u8 {
    let new_ptr = __rust_allocate(new_size, align);
    unsafe { core::ptr::copy(ptr, new_ptr, core::cmp::min(size, new_size)) }
    __rust_deallocate(ptr, size, align);
    new_ptr
}

#[no_mangle]
pub extern "C" fn __rust_reallocate_inplace(_ptr: *mut u8,
                                            size: usize,
                                            _new_size: usize,
                                            _align: usize)
                                            -> usize {

    size
}
